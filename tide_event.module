<?php

/**
 * @file
 * Tide Event module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\tide_site\TideSiteFields;
use Drupal\user\Entity\Role;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_event_entity_bundle_create($entity_type_id, $bundle) {
  if ($entity_type_id == 'node' && $bundle == 'event') {
    // Grant permissions on Test content type to Approver and Editor.
    $roles = ['approver', 'editor'];
    $permissions = [
      'create event content',
      'delete any event content',
      'delete own event content',
      'delete event revisions',
      'edit any event content',
      'edit own event content',
      'revert event revisions',
      'view event revisions',
    ];

    foreach ($roles as $role_name) {
      $role = Role::load($role_name);
      if ($role) {
        foreach ($permissions as $permission) {
          $role->grantPermission($permission);
        }
        $role->save();
      }
    }

    // Enable Editorial workflow.
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle($entity_type_id, $bundle);
      $editorial_workflow->save();
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function tide_event_modules_installed($modules) {
  module_set_weight('tide_event', 1000);

  // Invoke hook_entity_bundle_create again so that other modules can change
  // entity form display of the `event` content type which was reverted by
  // default config import during module installation.
  if (!\Drupal::service('config.installer')->isSyncing() && in_array('tide_event', $modules)) {
    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
    $moduleHandler = \Drupal::service('module_handler');
    //$moduleHandler->invokeAll('entity_bundle_create', ['node', 'event']);
  }
}

/**
 * Implements hook_search_api_index_items_alter()
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The search index on which items will be indexed.
 * @param \Drupal\search_api\Item\ItemInterface[] $items
 *   The items that will be indexed.
 */
function tide_event_search_api_index_items_alter(\Drupal\search_api\IndexInterface $index, array &$items) {
  foreach ($items as $item_id => $item) {

    // Format start date of a date range.
    $start_date = $item->getField('field_paragraph_date_range');
    if (!empty($start_date)) {
      $value = $start_date->getValues();
      $start_date->setValues([_get_formatted_date($value[0])]);
      $item->setField("field_paragraph_date_range", $start_date);
    }

    // Format end date of a date range.
    $end_date = $item->getField('end_value');
    if (!empty($end_date)) {
      $value = $end_date->getValues();
      $end_date->setValues([_get_formatted_date($value[0])]);
      $item->setField("end_value", $end_date);
    }
  }
}

/**
 * Converts timestamp to RFC-3339 format.
 *
 * @param int $ts
 *   Timestamp.
 * @return string
 *   Formatted date.
 */
function _get_formatted_date($ts) {
  $config = \Drupal::config('system.date');
  $timezone = new DateTimeZone($config->get('timezone.default'));
  $date = new \Datetime();
  $date->setTimezone($timezone);
  $date = $date->setTimestamp($ts);
  return $date->format("Y-m-d\TH:i:sP");
}
