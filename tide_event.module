<?php

/**
 * @file
 * Tide Event module functionality.
 */

use Drupal\user\Entity\Role;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_event_entity_bundle_create($entity_type_id, $bundle) {
  if ($entity_type_id == 'node' && $bundle == 'event') {
    // Grant permissions on Test content type to Approver and Editor.
    $roles = ['approver', 'editor'];
    $permissions = [
      'create event content',
      'delete any event content',
      'delete own event content',
      'delete event revisions',
      'edit any event content',
      'edit own event content',
      'revert event revisions',
      'view event revisions',
    ];

    foreach ($roles as $role_name) {
      $role = Role::load($role_name);
      if ($role) {
        foreach ($permissions as $permission) {
          $role->grantPermission($permission);
        }
        $role->save();
      }
    }

    // Enable Editorial workflow.
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle($entity_type_id, $bundle);
      $editorial_workflow->save();
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function tide_event_modules_installed($modules) {
  module_set_weight('tide_event', 1000);

  // Invoke hook_entity_bundle_create again so that other modules can change
  // entity form display of the `event` content type which was reverted by
  // default config import during module installation.
  if (!\Drupal::service('config.installer')->isSyncing() && in_array('tide_event', $modules)) {
    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
    $moduleHandler = \Drupal::service('module_handler');
    //$moduleHandler->invokeAll('entity_bundle_create', ['node', 'event']);
  }
}

/**
 * Implements hook_search_api_index_items_alter()
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The search index on which items will be indexed.
 * @param \Drupal\search_api\Item\ItemInterface[] $items
 *   The items that will be indexed.
 */
function tide_event_search_api_index_items_alter(\Drupal\search_api\IndexInterface $index, array &$items) {
  foreach ($items as $item_id => $item) {

    $content_type = $item->getField('type');
    if (empty($content_type) || $content_type->getValues()[0] !== 'event') {
      continue;
    }

    // Format start date of a date range.
    $start_date = $item->getField('field_event_date_start_value');
    if (!empty($start_date)) {
      $values = $start_date->getValues();
      $start_date_value = !empty($values) ? _tide_event_get_formatted_date($values[0]) : NULL;
      $start_date->setValues([$start_date_value]);
      $item->setField("field_event_date_start_value", $start_date);
    }

    // Format end date of a date range.
    $end_date = $item->getField('field_event_date_end_value');
    if (!empty($end_date)) {
      $values = $end_date->getValues();
      $end_date_value = !empty($values) ? _tide_event_get_formatted_date($values[0]) : NULL;
      $end_date->setValues([$end_date_value]);
      $item->setField("field_event_date_end_value", $end_date);
    }

    // Add the Link field path.
    // TODO: Consider a check for all site aliases
    //`tide_site.module:tide_site_search_api_index_items_alter`.
    // This should be redundant if we move to consolidating all index alters to
    // a processor.
    // See https://digital-engagement.atlassian.net/browse/SDPA-1071
    $field_link = $item->getField("field_paragraph_link");
    $uri = $field_link->getValues()[0];

    if (isset($uri)) {
      $path = Url::fromUri($uri)->toString();
    }

    if ($path){
      $field_link->setValues([$path]);
      $item->setField("field_paragraph_link", $field_link);
    }
  }
}

/**
 * Converts timestamp to RFC-3339 format.
 *
 * @param int $ts
 *   Timestamp.
 * @return string
 *   Formatted date.
 */
function _tide_event_get_formatted_date($ts) {
  $config = \Drupal::config('system.date');
  $timezone = new DateTimeZone($config->get('timezone.default'));
  $date = new \Datetime();
  $date->setTimezone($timezone);
  $date = $date->setTimestamp($ts);
  return $date->format("Y-m-d\TH:i:sP");
}
