<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\field\Entity\FieldConfig;
use Drupal\search_api\Item\Field;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\workflows\Entity\Workflow;
use Drupal\Component\Utility\Random;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for Tide profile Profile.
 *
 * @see system_install()
 */
function tide_event_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  _tide_event_add_fields_search_api();

  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'event');
      $editorial_workflow->save();
    }
  }

  // Enable entity type/bundles for use with scheduled transitions.
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('event', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function tide_event_uninstall() {
  // Remove permissions on Test content type to Approver and Editor.
  $roles = ['approver', 'editor'];
  $permissions = [
    'create event content',
    'delete any event content',
    'delete own event content',
    'delete event revisions',
    'edit any event content',
    'edit own event content',
    'revert event revisions',
    'view event revisions',
  ];

  foreach ($roles as $role_name) {
    $role = Role::load($role_name);
    if ($role) {
      foreach ($permissions as $permission) {
        $role->revokePermission($permission);
      }
      $role->save();
    }
  }
}

/**
 * Add fields to Search API.
 */
function _tide_event_add_fields_search_api() {

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index start date of event date field.
    $field_start_date = new Field($index, 'field_event_date_start_value');
    $field_start_date->setType('date');
    $field_start_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range');
    $field_start_date->setDatasourceId('entity:node');
    $field_start_date->setLabel('Event Details » Date Range » Start date value');
    $index->addField($field_start_date);

    // Index end date of the event date field.
    $field_end_date = new Field($index, 'field_event_date_end_value');
    $field_end_date->setType('date');
    $field_end_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range:end_value');
    $field_end_date->setDatasourceId('entity:node');
    $field_end_date->setLabel('Event Details » Date Range » End date value');
    $index->addField($field_end_date);

    // Index event category tid field.
    $field_event_category_tid = new Field($index, 'field_event_category_tid');
    $field_event_category_tid->setType('integer');
    $field_event_category_tid->setPropertyPath('field_event_category');
    $field_event_category_tid->setDatasourceId('entity:node');
    $field_event_category_tid->setLabel('Event Category');
    $index->addField($field_event_category_tid);

    // Index event category:name field.
    $field_event_category_name = new Field($index, 'field_event_category_name');
    $field_event_category_name->setType('string');
    $field_event_category_name->setPropertyPath('field_event_category:entity:name');
    $field_event_category_name->setDatasourceId('entity:node');
    $field_event_category_name->setLabel('Event Category » Taxonomy term » Name');
    $index->addField($field_event_category_name);

    // Index event category:uuid field.
    $field_event_category_uuid = new Field($index, 'field_event_category_uuid');
    $field_event_category_uuid->setType('string');
    $field_event_category_uuid->setPropertyPath('field_event_category:entity:uuid');
    $field_event_category_uuid->setDatasourceId('entity:node');
    $field_event_category_uuid->setLabel('Event Category » Taxonomy term » UUID');
    $index->addField($field_event_category_uuid);

    // Index field_news_intro_text field.
    $field_event_intro_text = new Field($index, 'field_event_intro_text');
    $field_event_intro_text->setType('text');
    $field_event_intro_text->setPropertyPath('field_news_intro_text');
    $field_event_intro_text->setDatasourceId('entity:node');
    $field_event_intro_text->setLabel('Event Introduction Text');
    $index->addField($field_event_intro_text);

    // Index field_event_description field.
    $field_event_description = new Field($index, 'field_event_description');
    $field_event_description->setType('text');
    $field_event_description->setPropertyPath('field_event_description');
    $field_event_description->setDatasourceId('entity:node');
    $field_event_description->setLabel('Event Description');
    $index->addField($field_event_description);

    // Index field_event_details_event_address_1 field.
    $field_event_details_event_address_1 = new Field($index, 'field_event_details_event_address_1');
    $field_event_details_event_address_1->setType('text');
    $field_event_details_event_address_1->setPropertyPath('field_event_details:entity:field_paragraph_location:address_line1');
    $field_event_details_event_address_1->setDatasourceId('entity:node');
    $field_event_details_event_address_1->setLabel('Event Details » Location »  The first line of the address block');
    $index->addField($field_event_details_event_address_1);

    // Index field_event_details_event_address_line2 field.
    $field_event_details_event_address_2 = new Field($index, 'field_event_details_event_address_line2');
    $field_event_details_event_address_2->setType('text');
    $field_event_details_event_address_2->setPropertyPath('field_event_details:entity:field_paragraph_location:address_line2');
    $field_event_details_event_address_2->setDatasourceId('entity:node');
    $field_event_details_event_address_2->setLabel('Event Details » Location »  The second line of the address block');
    $index->addField($field_event_details_event_address_2);

    // Index field_event_details_event_administrative_area field.
    $field_event_details_event_administrative_area = new Field($index, 'field_event_details_event_administrative_area');
    $field_event_details_event_administrative_area->setType('text');
    $field_event_details_event_administrative_area->setPropertyPath('field_event_details:entity:field_paragraph_location:administrative_area');
    $field_event_details_event_administrative_area->setDatasourceId('entity:node');
    $field_event_details_event_administrative_area->setLabel('Event Details » Location » The top-level administrative subdivision of the country');
    $index->addField($field_event_details_event_administrative_area);

    // Index field_event_details_event_locality field.
    $field_event_details_event_locality = new Field($index, 'field_event_details_event_locality');
    $field_event_details_event_locality->setType('text');
    $field_event_details_event_locality->setPropertyPath('field_event_details:entity:field_paragraph_location:locality');
    $field_event_details_event_locality->setDatasourceId('entity:node');
    $field_event_details_event_locality->setLabel('Event Details » Location » The locality');
    $index->addField($field_event_details_event_locality);

    // Index field_event_details_event_postal_code field.
    $field_event_details_event_postal_code = new Field($index, 'field_event_details_event_postal_code');
    $field_event_details_event_postal_code->setType('text');
    $field_event_details_event_postal_code->setPropertyPath('field_event_details:entity:field_paragraph_location:postal_code');
    $field_event_details_event_postal_code->setDatasourceId('entity:node');
    $field_event_details_event_postal_code->setLabel('Event Details » Location » The postal code');
    $index->addField($field_event_details_event_postal_code);

    // Index field_event_details_event_price_from field.
    $field_event_details_event_price_from = new Field($index, 'field_event_details_event_price_from');
    $field_event_details_event_price_from->setType('string');
    $field_event_details_event_price_from->setPropertyPath('field_event_details:entity:field_paragraph_event_price_from');
    $field_event_details_event_price_from->setDatasourceId('entity:node');
    $field_event_details_event_price_from->setLabel('Event Details » Price');
    $index->addField($field_event_details_event_price_from);

    // Index field_event_details_event_price_to field.
    $field_event_details_event_price_to = new Field($index, 'field_event_details_event_price_to');
    $field_event_details_event_price_to->setType('string');
    $field_event_details_event_price_to->setPropertyPath('field_event_details:entity:field_paragraph_event_price_to');
    $field_event_details_event_price_to->setDatasourceId('entity:node');
    $field_event_details_event_price_to->setLabel('Event Details » Price to');
    $index->addField($field_event_details_event_price_to);

    // Index field_event_details_event_requirements_name field.
    $field_event_details_event_requirements_name = new Field($index, 'field_event_details_event_requirements_name');
    $field_event_details_event_requirements_name->setType('string');
    $field_event_details_event_requirements_name->setPropertyPath('field_event_details:entity:field_event_requirements:entity:name');
    $field_event_details_event_requirements_name->setDatasourceId('entity:node');
    $field_event_details_event_requirements_name->setLabel('Event Details » Event Requirements » Name');
    $index->addField($field_event_details_event_requirements_name);

    // Index field_event_details_event_requirements_uuid field.
    $field_event_details_event_requirements_uuid = new Field($index, 'field_event_details_event_requirements_uuid');
    $field_event_details_event_requirements_uuid->setType('string');
    $field_event_details_event_requirements_uuid->setPropertyPath('field_event_details:entity:field_event_requirements:entity:uuid');
    $field_event_details_event_requirements_uuid->setDatasourceId('entity:node');
    $field_event_details_event_requirements_uuid->setLabel('Event Details » Event Requirements » UUID');
    $index->addField($field_event_details_event_requirements_uuid);

    // Index field_event_details_event_requirements_tid field.
    $field_event_details_event_requirements_tid = new Field($index, 'field_event_details_event_requirements_tid');
    $field_event_details_event_requirements_tid->setType('integer');
    $field_event_details_event_requirements_tid->setPropertyPath('field_event_details:entity:field_event_requirements');
    $field_event_details_event_requirements_tid->setDatasourceId('entity:node');
    $field_event_details_event_requirements_tid->setLabel('Event Details » Event Requirements');
    $index->addField($field_event_details_event_requirements_tid);

    $index->save();
  }
}

/**
 * Enable Editorial workflow if workflow module is enabled. [SDPA-982].
 */
function tide_event_update_8001() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'event');
      $editorial_workflow->save();
    }
  }
}

/**
 * Add Event Author user.
 */
function tide_event_update_8002() {
  // First import Event Author role configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('user.role.event_author', $config_location);

  // Create new Event Author user.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $user = User::create();

  $random = new Random();
  $pass = $random->string();
  $mail = $random->string();

  // Mandatory settings.
  $user->setPassword($pass);
  $user->enforceIsNew();
  $user->setEmail($mail . '@noreply.vic');
  $user->setUsername('Event Author');
  $user->addRole('event_author');

  // Optional settings.
  $user->set("init", 'email');
  $user->set("langcode", $language);
  $user->set("preferred_langcode", $language);
  $user->set("preferred_admin_langcode", $language);
  $user->activate();

  // Save user.
  $user->save();
}

/**
 * Add Webform Event submission to active config.
 */
function tide_event_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_event_submission', $config_location);
}

/**
 * Forced update of the field type using config from the module.
 */
function tide_event_update_8004() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('field.field.node.event.field_show_related_content', $config_location);
  _tide_import_single_config('core.entity_form_display.node.event.default', $config_location);
  _tide_import_single_config('core.entity_view_display.node.event.default', $config_location);
}

/**
 * Grant Webform Configuration access to API requests [SDPA-1213].
 */
function tide_event_update_8005() {
  $webforms = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->loadByProperties(['id' => 'tide_event_submission']);
  if ($webform = reset($webforms)) {
    /** @var \Drupal\webform\Entity\Webform $webform */
    $access_rules = $webform->getAccessRules();
    if (!isset($access_rules['configuration']['roles'])) {
      $access_rules['configuration'] = [
        'roles' => [AccountInterface::ANONYMOUS_ROLE],
        'users' => [],
        'permissions' => [],
      ];
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    elseif (!in_array(AccountInterface::ANONYMOUS_ROLE, $access_rules['configuration']['roles'])) {
      $access_rules['configuration']['roles'][] = AccountInterface::ANONYMOUS_ROLE;
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
  }
}

/**
 * Change field_show_social_sharing field default value to 1.
 */
function tide_event_update_8006() {
  $field = FieldConfig::loadByName('node', 'event', 'field_show_social_sharing');
  if (!$field->get('default_value')) {
    $field->set('default_value', TRUE);
    $field->save();
  }
}

/**
 * Adds field_show_time.
 */
function tide_event_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_show_time', $config_location);
  _tide_import_single_config('field.field.paragraph.event_details.field_show_time', $config_location);
  _tide_import_single_config('core.entity_form_display.paragraph.event_details.default', $config_location);
}

/**
 * Set default value of field_show_time for existing events.
 */
function tide_event_update_8008(&$sandbox) {
  $new_field = 'field_show_time';

  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityQuery('paragraph')
      ->condition('type', 'event_details')
      ->notExists($new_field)
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;

    if (!$count) {
      return;
    }
  }

  $batch_size = 50;
  $ids = \Drupal::entityQuery('paragraph')
    ->condition('type', 'event_details')
    ->notExists($new_field)
    ->condition('id', $sandbox['current'], '>')
    ->sort('id', 'ASC')
    ->range(0, $batch_size)
    ->execute();

  foreach ($ids as $id) {
    $sandbox['current'] = $id;
    $paragraph = Paragraph::load($id);
    if ($paragraph && $paragraph->hasField($new_field)) {
      $paragraph->set($new_field, TRUE);
      $paragraph->setNewRevision(FALSE);
      $paragraph->save();
    }
    $sandbox['processed']++;
  }

  $sandbox['#finished'] = $sandbox['total'] ? ($sandbox['processed'] / $sandbox['total']) : 1;
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_event_update_8009() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('event', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Create field status.
 */
function tide_event_update_8010() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('field.storage.node.field_status', $config_location);
  _tide_import_single_config('field.field.node.event.field_status', $config_location);
}

/**
 * Add status fields to entity form display.
 */
function tide_event_update_8011() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.event.default');
  $dependencies = $config->get('dependencies.config');
  $dependencies[] = 'field.field.node.event.field_status';

  $third_party_settings = $config->get('third_party_settings.field_group.group_body_content.children');
  $third_party_settings[] = 'field_status';

  $content = $config->get('content');
  $content['field_status'] = [
    'weight' => 13,
    'settings' => [
      'size' => 60,
      'placeholder' => '',
    ],
    'third_party_settings' => [],
    'type' => 'string_textfield',
    'region' => 'content',
  ];

  $config->set('dependencies.config', $dependencies);
  $config->set('third_party_settings.field_group.group_body_content.children', $third_party_settings);
  $config->set('content', $content);
  $config->save();
}

/**
 * Add status fields to entity view default display.
 */
function tide_event_update_8012() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.default');
  $dependencies = $config->get('dependencies.config');
  $dependencies[] = 'field.field.node.event.field_status';

  $content = $config->get('content');
  $content['field_status'] = [
    'weight' => 24,
    'label' => 'above',
    'settings' => [
      'link_to_entity' => FALSE,
    ],
    'third_party_settings' => [],
    'type' => 'string',
    'region' => 'content',
  ];

  $config->set('dependencies.config', $dependencies);
  $config->set('content', $content);
  $config->save();
}

/**
 * Add status fields to entity view teaser display.
 */
function tide_event_update_8013() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.teaser');
  $dependencies = $config->get('dependencies.config');
  $dependencies[] = 'field.field.node.event.field_status';

  $content = $config->get('hidden');
  $content['field_status'] = TRUE;

  $config->set('dependencies.config', $dependencies);
  $config->set('hidden', $content);
  $config->save();
}

/**
 * Add status fields to json.
 */
function tide_event_update_8014() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.node--event');

  $content = $config->get('resourceFields');
  $content['field_status'] = [
    'fieldName' => 'field_status',
    'publicName' => 'field_status',
    'enhancer' => [
      'id' => '',
    ],
    'disabled' => FALSE,
    'advancedOptionsIcon' => '',
    'enhancer_label' => '',
  ];

  $config->set('resourceFields', $content);
  $config->save();
}
