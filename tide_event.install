<?php

/**
 * @file
 * Install file.
 */

use Drupal\user\Entity\Role;
use Drupal\workflows\Entity\Workflow;


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for Tide profile Profile.
 *
 * @see system_install()
 */
function tide_event_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  _tide_event_add_fields_search_api();
  
  // Enable Editorial workflow if workflow module is enabled.
  /*$moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'event');
      $editorial_workflow->save();
    }
  }*/
}
/**
 * Implements hook_uninstall().
 */
function tide_event_uninstall() {
  // Remove permissions on Test content type to Approver and Editor.
  $roles = ['approver', 'editor'];
  $permissions = [
    'create event content',
    'delete any event content',
    'delete own event content',
    'delete event revisions',
    'edit any event content',
    'edit own event content',
    'revert event revisions',
    'view event revisions',
  ];

  foreach ($roles as $role_name) {
    $role = Role::load($role_name);
    if ($role) {
      foreach ($permissions as $permission) {
        $role->revokePermission($permission);
      }
      $role->save();
    }
  }
}

/**
 * Add fields to Search API.
 */
function _tide_event_add_fields_search_api() {

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index start date of event date field.
    $field_start_date = new Field($index, 'field_paragraph_date_range');
    $field_start_date->setType('date');
    $field_start_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range');
    $field_start_date->setDatasourceId('entity:node');
    $field_start_date->setLabel('Event Details » Paragraph » Date Range');
    $index->addField($field_start_date);

    // Index end date of the event date field.
    $field_end_date = new Field($index, 'end_value');
    $field_end_date->setType('date');
    $field_end_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range:end_value');
    $field_end_date->setDatasourceId('entity:node');
    $field_end_date->setLabel('Event Details » Paragraph » Date Range » End date value');
    $index->addField($field_end_date);

    $index->save();
  }
}
