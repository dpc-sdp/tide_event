<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\field\Entity\FieldConfig;
use Drupal\search_api\Item\Field;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\workflows\Entity\Workflow;
use Drupal\Component\Utility\Random;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for Tide profile Profile.
 *
 * @see system_install()
 */
function tide_event_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  _tide_event_add_fields_search_api();

  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'event');
      $editorial_workflow->save();
    }
  }

  // Enable entity type/bundles for use with scheduled transitions.
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('event', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function tide_event_uninstall() {
  // Remove permissions on Test content type to Approver and Editor.
  $roles = ['approver', 'editor'];
  $permissions = [
    'create event content',
    'delete any event content',
    'delete own event content',
    'delete event revisions',
    'edit any event content',
    'edit own event content',
    'revert event revisions',
    'view event revisions',
  ];

  foreach ($roles as $role_name) {
    $role = Role::load($role_name);
    if ($role) {
      foreach ($permissions as $permission) {
        $role->revokePermission($permission);
      }
      $role->save();
    }
  }
}

/**
 * Add fields to Search API.
 */
function _tide_event_add_fields_search_api() {

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index start date of event date field.
    $field_start_date = new Field($index, 'field_event_date_start_value');
    $field_start_date->setType('date');
    $field_start_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range');
    $field_start_date->setDatasourceId('entity:node');
    $field_start_date->setLabel('Event Details » Date Range » Start date value');
    $index->addField($field_start_date);

    // Index end date of the event date field.
    $field_end_date = new Field($index, 'field_event_date_end_value');
    $field_end_date->setType('date');
    $field_end_date->setPropertyPath('field_event_details:entity:field_paragraph_date_range:end_value');
    $field_end_date->setDatasourceId('entity:node');
    $field_end_date->setLabel('Event Details » Date Range » End date value');
    $index->addField($field_end_date);

    // Index event category tid field.
    $field_event_category_tid = new Field($index, 'field_event_category_tid');
    $field_event_category_tid->setType('integer');
    $field_event_category_tid->setPropertyPath('field_event_category');
    $field_event_category_tid->setDatasourceId('entity:node');
    $field_event_category_tid->setLabel('Event Category');
    $index->addField($field_event_category_tid);

    // Index event category:name field.
    $field_event_category_name = new Field($index, 'field_event_category_name');
    $field_event_category_name->setType('string');
    $field_event_category_name->setPropertyPath('field_event_category:entity:name');
    $field_event_category_name->setDatasourceId('entity:node');
    $field_event_category_name->setLabel('Event Category » Taxonomy term » Name');
    $index->addField($field_event_category_name);

    // Index event category:uuid field.
    $field_event_category_uuid = new Field($index, 'field_event_category_uuid');
    $field_event_category_uuid->setType('string');
    $field_event_category_uuid->setPropertyPath('field_event_category:entity:uuid');
    $field_event_category_uuid->setDatasourceId('entity:node');
    $field_event_category_uuid->setLabel('Event Category » Taxonomy term » UUID');
    $index->addField($field_event_category_uuid);

    // Index field_news_intro_text field.
    $field_event_intro_text = new Field($index, 'field_event_intro_text');
    $field_event_intro_text->setType('text');
    $field_event_intro_text->setPropertyPath('field_news_intro_text');
    $field_event_intro_text->setDatasourceId('entity:node');
    $field_event_intro_text->setLabel('Event Introduction Text');
    $index->addField($field_event_intro_text);

    // Index field_event_description field.
    $field_event_description = new Field($index, 'field_event_description');
    $field_event_description->setType('text');
    $field_event_description->setPropertyPath('field_event_description');
    $field_event_description->setDatasourceId('entity:node');
    $field_event_description->setLabel('Event Description');
    $index->addField($field_event_description);

    // Index field_event_details_event_address_1 field.
    $field_event_details_event_address_1 = new Field($index, 'field_event_details_event_address_1');
    $field_event_details_event_address_1->setType('text');
    $field_event_details_event_address_1->setPropertyPath('field_event_details:entity:field_paragraph_location:address_line1');
    $field_event_details_event_address_1->setDatasourceId('entity:node');
    $field_event_details_event_address_1->setLabel('Event Details » Location »  The first line of the address block');
    $index->addField($field_event_details_event_address_1);

    // Index field_event_details_event_address_line2 field.
    $field_event_details_event_address_2 = new Field($index, 'field_event_details_event_address_line2');
    $field_event_details_event_address_2->setType('text');
    $field_event_details_event_address_2->setPropertyPath('field_event_details:entity:field_paragraph_location:address_line2');
    $field_event_details_event_address_2->setDatasourceId('entity:node');
    $field_event_details_event_address_2->setLabel('Event Details » Location »  The second line of the address block');
    $index->addField($field_event_details_event_address_2);

    // Index field_event_details_event_administrative_area field.
    $field_event_details_event_administrative_area = new Field($index, 'field_event_details_event_administrative_area');
    $field_event_details_event_administrative_area->setType('text');
    $field_event_details_event_administrative_area->setPropertyPath('field_event_details:entity:field_paragraph_location:administrative_area');
    $field_event_details_event_administrative_area->setDatasourceId('entity:node');
    $field_event_details_event_administrative_area->setLabel('Event Details » Location » The top-level administrative subdivision of the country');
    $index->addField($field_event_details_event_administrative_area);

    // Index field_event_details_event_locality field.
    $field_event_details_event_locality = new Field($index, 'field_event_details_event_locality');
    $field_event_details_event_locality->setType('text');
    $field_event_details_event_locality->setPropertyPath('field_event_details:entity:field_paragraph_location:locality');
    $field_event_details_event_locality->setDatasourceId('entity:node');
    $field_event_details_event_locality->setLabel('Event Details » Location » The locality');
    $index->addField($field_event_details_event_locality);

    // Index field_event_details_event_postal_code field.
    $field_event_details_event_postal_code = new Field($index, 'field_event_details_event_postal_code');
    $field_event_details_event_postal_code->setType('text');
    $field_event_details_event_postal_code->setPropertyPath('field_event_details:entity:field_paragraph_location:postal_code');
    $field_event_details_event_postal_code->setDatasourceId('entity:node');
    $field_event_details_event_postal_code->setLabel('Event Details » Location » The postal code');
    $index->addField($field_event_details_event_postal_code);

    // Index field_event_details_event_price_from field.
    $field_event_details_event_price_from = new Field($index, 'field_event_details_event_price_from');
    $field_event_details_event_price_from->setType('string');
    $field_event_details_event_price_from->setPropertyPath('field_event_details:entity:field_paragraph_event_price_from');
    $field_event_details_event_price_from->setDatasourceId('entity:node');
    $field_event_details_event_price_from->setLabel('Event Details » Price');
    $index->addField($field_event_details_event_price_from);

    // Index field_event_details_event_price_to field.
    $field_event_details_event_price_to = new Field($index, 'field_event_details_event_price_to');
    $field_event_details_event_price_to->setType('string');
    $field_event_details_event_price_to->setPropertyPath('field_event_details:entity:field_paragraph_event_price_to');
    $field_event_details_event_price_to->setDatasourceId('entity:node');
    $field_event_details_event_price_to->setLabel('Event Details » Price to');
    $index->addField($field_event_details_event_price_to);

    // Index field_event_details_event_requirements_name field.
    $field_event_details_event_requirements_name = new Field($index, 'field_event_details_event_requirements_name');
    $field_event_details_event_requirements_name->setType('string');
    $field_event_details_event_requirements_name->setPropertyPath('field_event_details:entity:field_event_requirements:entity:name');
    $field_event_details_event_requirements_name->setDatasourceId('entity:node');
    $field_event_details_event_requirements_name->setLabel('Event Details » Event Requirements » Name');
    $index->addField($field_event_details_event_requirements_name);

    // Index field_event_details_event_requirements_uuid field.
    $field_event_details_event_requirements_uuid = new Field($index, 'field_event_details_event_requirements_uuid');
    $field_event_details_event_requirements_uuid->setType('string');
    $field_event_details_event_requirements_uuid->setPropertyPath('field_event_details:entity:field_event_requirements:entity:uuid');
    $field_event_details_event_requirements_uuid->setDatasourceId('entity:node');
    $field_event_details_event_requirements_uuid->setLabel('Event Details » Event Requirements » UUID');
    $index->addField($field_event_details_event_requirements_uuid);

    // Index field_event_details_event_requirements_tid field.
    $field_event_details_event_requirements_tid = new Field($index, 'field_event_details_event_requirements_tid');
    $field_event_details_event_requirements_tid->setType('integer');
    $field_event_details_event_requirements_tid->setPropertyPath('field_event_details:entity:field_event_requirements');
    $field_event_details_event_requirements_tid->setDatasourceId('entity:node');
    $field_event_details_event_requirements_tid->setLabel('Event Details » Event Requirements');
    $index->addField($field_event_details_event_requirements_tid);

    $index->save();
  }
}

/**
 * Enable Editorial workflow if workflow module is enabled. [SDPA-982].
 */
function tide_event_update_8001() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'event');
      $editorial_workflow->save();
    }
  }
}

/**
 * Add Event Author user.
 */
function tide_event_update_8002() {
  // First import Event Author role configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('user.role.event_author', $config_location);

  // Create new Event Author user.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $user = User::create();

  $random = new Random();
  $pass = $random->string();
  $mail = $random->string();

  // Mandatory settings.
  $user->setPassword($pass);
  $user->enforceIsNew();
  $user->setEmail($mail . '@noreply.vic');
  $user->setUsername('Event Author');
  $user->addRole('event_author');

  // Optional settings.
  $user->set("init", 'email');
  $user->set("langcode", $language);
  $user->set("preferred_langcode", $language);
  $user->set("preferred_admin_langcode", $language);
  $user->activate();

  // Save user.
  $user->save();
}

/**
 * Add Webform Event submission to active config.
 */
function tide_event_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_event_submission', $config_location);
}

/**
 * Forced update of the field type using config from the module.
 */
function tide_event_update_8004() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('field.field.node.event.field_show_related_content', $config_location);
  _tide_import_single_config('core.entity_form_display.node.event.default', $config_location);
  _tide_import_single_config('core.entity_view_display.node.event.default', $config_location);
}

/**
 * Grant Webform Configuration access to API requests [SDPA-1213].
 */
function tide_event_update_8005() {
  $webforms = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->loadByProperties(['id' => 'tide_event_submission']);
  if ($webform = reset($webforms)) {
    /** @var \Drupal\webform\Entity\Webform $webform */
    $access_rules = $webform->getAccessRules();
    if (!isset($access_rules['configuration']['roles'])) {
      $access_rules['configuration'] = [
        'roles' => [AccountInterface::ANONYMOUS_ROLE],
        'users' => [],
        'permissions' => [],
      ];
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    elseif (!in_array(AccountInterface::ANONYMOUS_ROLE, $access_rules['configuration']['roles'])) {
      $access_rules['configuration']['roles'][] = AccountInterface::ANONYMOUS_ROLE;
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
  }
}

/**
 * Change field_show_social_sharing field default value to 1.
 */
function tide_event_update_8006() {
  $field = FieldConfig::loadByName('node', 'event', 'field_show_social_sharing');
  if (!$field->get('default_value')) {
    $field->set('default_value', TRUE);
    $field->save();
  }
}

/**
 * Adds field_show_time.
 */
function tide_event_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];
  _tide_import_single_config('field.storage.paragraph.field_show_time', $config_location);
  _tide_import_single_config('field.field.paragraph.event_details.field_show_time', $config_location);
  _tide_import_single_config('core.entity_form_display.paragraph.event_details.default', $config_location);
}

/**
 * Set default value of field_show_time for existing events.
 */
function tide_event_update_8008(&$sandbox) {
  $new_field = 'field_show_time';

  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityQuery('paragraph')
      ->condition('type', 'event_details')
      ->notExists($new_field)
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;

    if (!$count) {
      return;
    }
  }

  $batch_size = 50;
  $ids = \Drupal::entityQuery('paragraph')
    ->condition('type', 'event_details')
    ->notExists($new_field)
    ->condition('id', $sandbox['current'], '>')
    ->sort('id', 'ASC')
    ->range(0, $batch_size)
    ->execute();

  foreach ($ids as $id) {
    $sandbox['current'] = $id;
    $paragraph = Paragraph::load($id);
    if ($paragraph && $paragraph->hasField($new_field)) {
      $paragraph->set($new_field, TRUE);
      $paragraph->setNewRevision(FALSE);
      $paragraph->save();
    }
    $sandbox['processed']++;
  }

  $sandbox['#finished'] = $sandbox['total'] ? ($sandbox['processed'] / $sandbox['total']) : 1;
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_event_update_8009() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('event', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'event'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Create field status.
 */
function tide_event_update_8010() {
  $configs = [
    'field.storage.node.field_status' => 'field_storage_config',
    'field.field.node.event.field_status' => 'field_config',
  ];

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];

  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }
}

/**
 * Add status fields to entity form display.
 */
function tide_event_update_8011() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.event.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_status', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_status';
  }

  $third_party_settings = $config->get('third_party_settings.field_group.group_body_content.children');
  if (!in_array('field_status', $third_party_settings)) {
    $third_party_settings[] = 'field_status';
    $config->set('third_party_settings.field_group.group_body_content.children', $third_party_settings);
  }

  $content = $config->get('content');
  if (!isset($content['field_status'])) {
    $content['field_status'] = [
      'weight' => 13,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
    $config->set('content', $content);
  }

  $config->set('dependencies.config', $dependencies);

  $config->save();
}

/**
 * Add status fields to entity view default display.
 */
function tide_event_update_8012() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_status', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_status';
    $config->set('dependencies.config', $dependencies);
  }

  $content = $config->get('content');
  if (!isset($content['field_status'])) {
    $content['field_status'] = [
      'weight' => 24,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE,
      ],
      'third_party_settings' => [],
      'type' => 'string',
      'region' => 'content',
    ];
    $config->set('content', $content);
  }

  $config->save();
}

/**
 * Add status fields to entity view teaser display.
 */
function tide_event_update_8013() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.teaser');
  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_status', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_status';
    $config->set('dependencies.config', $dependencies);
  }

  $content = $config->get('hidden');
  if (!isset($content['field_status'])) {
    $content['field_status'] = TRUE;
    $config->set('hidden', $content);
  }

  $config->save();
}

/**
 * Add status fields to json.
 */
function tide_event_update_8014() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.node--event');

  $content = $config->get('resourceFields');
  if (!isset($content['field_status'])) {
    $content['field_status'] = [
      'fieldName' => 'field_status',
      'publicName' => 'field_status',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
      'advancedOptionsIcon' => '',
      'enhancer_label' => '',
    ];

    $config->set('resourceFields', $content);
  }

  $config->save();
}

/**
 * Add status field to search api.
 */
function tide_event_update_8015() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('search_api.index.node');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.storage.node.field_status', $dependencies)) {
    $dependencies[] = 'field.storage.node.field_status';
    $config->set('dependencies.config', $dependencies);
  }

  $field_settings = $config->get('field_settings');
  if (!isset($field_settings['field_status'])) {
    $field_settings['field_status'] = [
      'label' => 'Status',
      'datasource_id' => 'entity:node',
      'property_path' => 'field_status',
      'type' => 'string',
      'dependencies' => [
        'config' => [
          'field.storage.node.field_status',
        ],
      ],
    ];
    $config->set('field_settings', $field_settings);
  }

  $processor_settings = $config->get('processor_settings.html_filter.fields');
  if (!in_array('field_status', $processor_settings)) {
    $processor_settings[] = 'field_status';
    $config->set('processor_settings.html_filter.fields', $processor_settings);
  }

  $config->save();
}

/**
 * Display updates to event default form.
 */
function tide_event_update_8016() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.event.default');

  $group_page_header_children = $config->get('third_party_settings.field_group.group_page_header.children');
  if (!in_array('field_event_details', $group_page_header_children)) {
    $group_page_header_children[] = 'field_event_details';
  }
  if (!in_array('field_audience', $group_page_header_children)) {
    $group_page_header_children[] = 'field_audience';
  }
  if (!in_array('field_event_category', $group_page_header_children)) {
    $group_page_header_children[] = 'field_event_category';
  }
  $config->set('third_party_settings.field_group.group_page_header.children', $group_page_header_children);
  $config->set('third_party_settings.field_group.group_page_header.label', 'Details');

  $group_body_content_children = $config->get('third_party_settings.field_group.group_body_content.children');
  if (($key = array_search('field_event_details', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_event_category', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_audience', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_node_link', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }

  if (!in_array('group_external_link', $group_body_content_children)) {
    $group_body_content_children[] = 'group_external_link';
  }
  if (!in_array('field_show_social_sharing', $group_body_content_children)) {
    $group_body_content_children[] = 'field_show_social_sharing';
  }
  $config->set('third_party_settings.field_group.group_body_content.children', $group_body_content_children);
  $config->set('third_party_settings.field_group.group_body_content.label', 'Content');
  $config->set('third_party_settings.field_group.group_body_content.weight', 10);

  $third_party_settings_field_group = $config->get('third_party_settings.field_group');
  if (!isset($third_party_settings_field_group['group_external_link'])) {
    $third_party_settings_field_group['group_external_link'] = [
      'children' => [
        'field_node_link',
      ],
      'parent_name' => 'group_body_content',
      'weight' => 14,
      'format_type' => 'fieldset',
      'format_settings' => [
        'id' => '',
        'classes' => '',
        'effect' => 'none',
        'description' => '',
        'required_fields' => true,
      ],
      'label' => 'External Link',
      'region' => 'content',
    ];
  }

  $config->set('third_party_settings.field_group', $third_party_settings_field_group);

  $config->set('content.created.weight', 7);
  $config->set('content.field_audience.weight', 9);
  $config->set('content.field_event_category.weight', 10);
  $config->set('content.field_event_details.weight', 8);
  $config->set('content.field_metatags.weight', 5);
  $config->set('content.field_node_link.weight', 10);
  $config->set('content.field_node_site.weight', 15);
  $config->set('content.field_related_links.weight', 6);
  $config->set('content.field_show_related_content.weight', 5);
  $config->set('content.field_show_social_sharing.weight', 13);
  $config->set('content.field_status.weight', 11);
  $config->set('content.moderation_state.weight', 12);
  $config->set('content.path.weight', 10);
  $config->set('content.promote.weight', 8);
  $config->set('content.status.weight', 13);
  $config->set('content.sticky.weight', 9);
  $config->set('content.uid.weight', 6);
  $config->set('content.url_redirects.weight', 11);

  $config->save();
}

/**
 * Display updates to event link.
 */
function tide_event_update_8018() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.node.event.field_node_link');
  $config->set('label', 'URL');

  $config->save();
}

/**
 * Display updates to event social sharing.
 */
function tide_event_update_8019() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.node.event.field_show_social_sharing');
  $config->set('label', 'Display Social Sharing');

  $config->save();
}

/**
 * Display updates to event date range.
 */
function tide_event_update_8020() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.paragraph.event_details.field_paragraph_date_range');
  $config->set('required', FALSE);
  $config->set('default_value', []);

  $config->save();
}

/**
 * Display updates to event default form to hide fields.
 */
function tide_event_update_8021() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.event.default');

  $group_section_1_children = $config->get('third_party_settings.field_group.group_section_1.children');
  if (($key = array_search('group_event_author', $group_section_1_children)) !== false) {
    unset($group_section_1_children[$key]);
  }
  $config->set('third_party_settings.field_group.group_section_1.children', $group_section_1_children);

  $group_page_header_children = $config->get('third_party_settings.field_group.group_page_header.children');
  if (($key = array_search('field_news_intro_text', $group_page_header_children)) !== false) {
    unset($group_page_header_children[$key]);
  }
  if (($key = array_search('field_event_description', $group_page_header_children)) !== false) {
    unset($group_page_header_children[$key]);
  }
  $config->set('third_party_settings.field_group.group_page_header.children', $group_page_header_children);

  $group_right_column_children = $config->get('third_party_settings.field_group.group_right_column.children');
  if (($key = array_search('group_social_sharing', $group_right_column_children)) !== false) {
    unset($group_right_column_children[$key]);
  }
  $config->set('third_party_settings.field_group.group_right_column.children', $group_right_column_children);
  $config->set('third_party_settings.field_group.group_right_column.weight', 23);
  $config->set('third_party_settings.field_group.group_right_column.region', 'hidden');

  $config->set('third_party_settings.field_group.group_contact.region', 'hidden');

  $group_body_content_children = $config->get('third_party_settings.field_group.group_body_content.children');
  if (($key = array_search('field_status', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_event_details', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_event_category', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_audience', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  if (($key = array_search('field_node_link', $group_body_content_children)) !== false) {
    unset($group_body_content_children[$key]);
  }
  $config->set('third_party_settings.field_group.group_body_content.children', $group_body_content_children);

  $config->set('third_party_settings.field_group.group_social_sharing.children', []);
  $config->set('third_party_settings.field_group.group_social_sharing.parent_name', '');
  $config->set('third_party_settings.field_group.group_social_sharing.weight', 22);

  $config->set('third_party_settings.field_group.group_related_links.region', 'hidden');

  $config->set('third_party_settings.field_group.group_event_author.parent_name', '');
  $config->set('third_party_settings.field_group.group_event_author.weight', 22);
  $config->set('third_party_settings.field_group.group_event_author.region', 'hidden');

  $config->set('content.created.weight', 5);

  $content = $config->get('content');
  if (isset($content['field_landing_page_contact'])) {
    unset($content['field_landing_page_contact']);
  }
  if (isset($content['field_landing_page_show_contact'])) {
    unset($content['field_landing_page_show_contact']);
  }
  if (isset($content['field_news_intro_text'])) {
    unset($content['field_news_intro_text']);
  }
  if (isset($content['field_node_author'])) {
    unset($content['field_node_author']);
  }
  if (isset($content['field_node_email'])) {
    unset($content['field_node_email']);
  }
  if (isset($content['field_node_phone'])) {
    unset($content['field_node_phone']);
  }
  if (isset($content['field_related_links'])) {
    unset($content['field_related_links']);
  }
  if (isset($content['field_show_related_content'])) {
    unset($content['field_show_related_content']);
  }
  if (isset($content['field_status'])) {
    unset($content['field_status']);
  }
  if (isset($content['field_event_description'])) {
    unset($content['field_event_description']);
  }
  $config->set('content', $content);

  $config->set('content.field_metatags.weight', 3);
  $config->set('content.field_node_site.weight', 13);
  $config->set('content.field_tags.weight', 2);
  $config->set('content.field_topic.weight', 1);
  $config->set('content.moderation_state.weight', 10);
  $config->set('content.path.weight', 8);
  $config->set('content.promote.weight', 6);
  $config->set('content.status.weight', 11);
  $config->set('content.sticky.weight', 7);
  $config->set('content.uid.weight', 4);
  $config->set('content.url_redirects.weight', 9);

  $hidden = $config->get('hidden');
  if (!isset($hidden['field_event_description'])) {
    $hidden['field_event_description'] = TRUE;
  }
  if (!isset($hidden['field_landing_page_contact'])) {
    $hidden['field_landing_page_contact'] = TRUE;
  }
  if (!isset($hidden['field_landing_page_show_contact'])) {
    $hidden['field_landing_page_show_contact'] = TRUE;
  }
  if (!isset($hidden['field_news_intro_text'])) {
    $hidden['field_news_intro_text'] = TRUE;
  }
  if (!isset($hidden['field_node_author'])) {
    $hidden['field_node_author'] = TRUE;
  }
  if (!isset($hidden['field_node_email'])) {
    $hidden['field_node_email'] = TRUE;
  }
  if (!isset($hidden['field_node_phone'])) {
    $hidden['field_node_phone'] = TRUE;
  }
  if (!isset($hidden['field_related_links'])) {
    $hidden['field_related_links'] = TRUE;
  }
  if (!isset($hidden['field_show_related_content'])) {
    $hidden['field_show_related_content'] = TRUE;
  }
  if (!isset($hidden['field_show_content_rating'])) {
    $hidden['field_show_content_rating'] = TRUE;
  }
  if (!isset($hidden['field_status'])) {
    $hidden['field_status'] = TRUE;
  }
  $config->set('hidden', $hidden);

  $config->save();
}

/**
 * Update price label for event content type price from field.
 */
function tide_event_update_8022() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.paragraph.event_details.field_paragraph_event_price_from');

  $config->set('description', 'Leave blank if no cost/free');

  $config->save();
}

/**
 * Import new field configuration for event content type and event details paragraph.
 */
function tide_event_update_8023() {
  $configs = [
    'field.storage.node.field_event_cta_text' => 'field_storage_config',
    'field.storage.node.field_is_event_series' => 'field_storage_config',
    'field.storage.node.field_parent_event' => 'field_storage_config',
    'field.storage.paragraph.field_date_not_applicable' => 'field_storage_config',
    'field.storage.paragraph.field_event_availability' => 'field_storage_config',
    'field.storage.paragraph.field_paragraph_attendence_mode' => 'field_storage_config',
    'field.storage.paragraph.field_paragraph_event_capacity' => 'field_storage_config',
    'field.storage.paragraph.field_paragraph_event_duration' => 'field_storage_config',
    'field.storage.paragraph.field_paragraph_event_schedule' => 'field_storage_config',
    'field.field.node.event.field_event_cta_text' => 'field_config',
    'field.field.node.event.field_is_event_series' => 'field_config',
    'field.field.node.event.field_parent_event' => 'field_config',
    'field.field.node.event.field_landing_page_component' => 'field_config',
    'field.field.paragraph.event_details.field_date_not_applicable' => 'field_config',
    'field.field.paragraph.event_details.field_event_availability' => 'field_config',
    'field.field.paragraph.event_details.field_paragraph_attendence_mode' => 'field_config',
    'field.field.paragraph.event_details.field_paragraph_event_capacity' => 'field_config',
    'field.field.paragraph.event_details.field_paragraph_event_duration' => 'field_config',
    'field.field.paragraph.event_details.field_paragraph_event_schedule' => 'field_config',
  ];

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_event') . '/config/install'];

  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);

    $extracted_config_name = $config;

    if (strrpos($config, 'field.storage.') !== FALSE) {
      $extracted_config_name = str_replace('field.storage.', '', $config);
    } elseif (strrpos($config, 'field.field.') !== FALSE) {
      $extracted_config_name = str_replace('field.field.', '', $config);
    }

    if ($storage->load($extracted_config_name) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
}

/**
 * Display updates to event landing page component.
 */
function tide_event_update_8024() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.node.event.field_landing_page_component');
  $config->set('label', 'Body components');

  $config->save();
}

/**
 * Add new fields to event default form.
 */
function tide_event_update_8025() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.event.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_is_event_series', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_is_event_series';
  }
  if (!in_array('field.field.node.event.field_parent_event', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_parent_event';
  }
  if (!in_array('field.field.node.event.field_event_cta_text', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_event_cta_text';
  }
  $config->set('dependencies.config', $dependencies);

  $group_page_header_children = $config->get('third_party_settings.field_group.group_page_header.children');
  if (!in_array('field_is_event_series', $group_page_header_children)) {
    $group_page_header_children[] = 'field_is_event_series';
  }
  if (!in_array('field_parent_event', $group_page_header_children)) {
    $group_page_header_children[] = 'field_parent_event';
  }
  $config->set('third_party_settings.field_group.group_page_header.children', $group_page_header_children);

  $group_external_content_children = $config->get('third_party_settings.field_group.group_external_link.children');
  if (!in_array('field_event_cta_text', $group_external_content_children)) {
    $group_external_content_children[] = 'field_event_cta_text';
  }
  $config->set('third_party_settings.field_group.group_external_link.children', $group_external_content_children);

  $config->set('third_party_settings.field_group.group_right_column.weight', 25);
  $config->set('third_party_settings.field_group.group_body_content.weight', 9);
  $config->set('third_party_settings.field_group.group_social_sharing.weight', 23);
  $config->set('third_party_settings.field_group.group_event_author.weight', 24);

  $config->set('content.created.weight', 7);
  $config->set('content.field_audience.weight', 7);
  $config->set('content.field_event_category.weight', 8);
  $config->set('content.field_event_details.weight', 4);
  $config->set('content.field_landing_page_summary.weight', 3);
  $config->set('content.field_metatags.weight', 5);
  $config->set('content.field_node_site.weight', 14);
  $config->set('content.field_tags.weight', 4);
  $config->set('content.field_topic.weight', 3);
  $config->set('content.moderation_state.weight', 12);
  $config->set('content.path.weight', 10);
  $config->set('content.promote.weight', 8);
  $config->set('content.status.weight', 13);
  $config->set('content.sticky.weight', 9);
  $config->set('content.uid.weight', 6);
  $config->set('content.url_redirects.weight', 11);
  $config->set('content.body.weight', 13);
  $config->set('content.field_show_social_sharing.weight', 15);
  $config->set('content.field_landing_page_component.weight', 14);

  $content = $config->get('content');
  if (!isset($content['field_is_event_series'])) {
    $content['field_is_event_series'] = [
      'weight' => 5,
      'settings' => [
        'display_label' => TRUE,
      ],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ];
  }
  if (!isset($content['field_parent_event'])) {
    $content['field_parent_event'] = [
      'weight' => 6,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'match_limit' => 10,
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'entity_reference_autocomplete',
      'region' => 'content',
    ];
  }
  if (!isset($content['field_event_cta_text'])) {
    $content['field_event_cta_text'] = [
      'weight' => 11,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }
  $config->set('content', $content);

  $config->save();
}

/**
 * Add new fields to event default view.
 */
function tide_event_update_8026() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_is_event_series', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_is_event_series';
  }
  if (!in_array('field.field.node.event.field_parent_event', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_parent_event';
  }
  if (!in_array('field.field.node.event.field_event_cta_text', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_event_cta_text';
  }
  $config->set('dependencies.config', $dependencies);

  $hidden = $config->get('hidden');
  if (!isset($hidden['field_event_cta_text'])) {
    $hidden['field_event_cta_text'] = TRUE;
  }
  if (!isset($hidden['field_is_event_series'])) {
    $hidden['field_is_event_series'] = TRUE;
  }
  if (!isset($hidden['field_parent_event'])) {
    $hidden['field_parent_event'] = TRUE;
  }
  if (!isset($hidden['field_event_cta_text'])) {
    $hidden['field_event_cta_text'] = TRUE;
  }
  $config->set('hidden', $hidden);

  $config->save();
}

/**
 * Add new fields to event teaser.
 */
function tide_event_update_8027() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.node.event.teaser');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.event.field_is_event_series', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_is_event_series';
  }
  if (!in_array('field.field.node.event.field_parent_event', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_parent_event';
  }
  if (!in_array('field.field.node.event.field_event_cta_text', $dependencies)) {
    $dependencies[] = 'field.field.node.event.field_event_cta_text';
  }
  $config->set('dependencies.config', $dependencies);

  $hidden = $config->get('hidden');
  if (!isset($hidden['field_is_event_series'])) {
    $hidden['field_is_event_series'] = TRUE;
  }
  if (!isset($hidden['field_parent_event'])) {
    $hidden['field_parent_event'] = TRUE;
  }
  if (!isset($hidden['field_event_cta_text'])) {
    $hidden['field_event_cta_text'] = TRUE;
  }
  $config->set('hidden', $hidden);

  $config->save();
}

/**
 * Update paragraph event default form with new fields.
 */
function tide_event_update_8028() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.paragraph.event_details.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.paragraph.event_details.field_date_not_applicable', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_date_not_applicable';
  }
  if (!in_array('field.field.paragraph.event_details.field_event_availability', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_event_availability';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_attendence_mode', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_attendence_mode';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_capacity', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_capacity';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_duration', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_duration';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_schedule', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_schedule';
  }
  $config->set('dependencies.config', $dependencies);

  $content = $config->get('content');
  if (!isset($content['field_date_not_applicable'])) {
    $content['field_date_not_applicable'] = [
      'weight' => 0,
      'settings' => [
        'display_label' => TRUE,
      ],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_event_availability'])) {
    $content['field_event_availability'] = [
      'weight' => 6,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_attendence_mode'])) {
    $content['field_paragraph_attendence_mode'] = [
      'weight' => 4,
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'options_select',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_capacity'])) {
    $content['field_paragraph_event_capacity'] = [
      'weight' => 8,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_duration'])) {
    $content['field_paragraph_event_duration'] = [
      'weight' => 3,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_schedule'])) {
    $content['field_paragraph_event_schedule'] = [
      'weight' => 2,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }

  if (isset($content['field_paragraph_event_price_from'])) {
    $content['field_paragraph_event_price_from'] = [
      'weight' => 7,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ];
  }

  if (isset($content['field_paragraph_location'])) {
    $content['field_paragraph_location'] = [
      'weight' => 5,
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'address_default',
      'region' => 'content',
    ];
  }

  if (isset($content['field_paragraph_event_price_to'])) {
    unset($content['field_paragraph_event_price_to']);
  }

  if (isset($content['field_paragraph_link'])) {
    unset($content['field_paragraph_link']);
  }

  if (isset($content['field_show_time'])) {
    unset($content['field_show_time']);
  }
  $config->set('content', $content);

  $config->set('content.field_event_requirements.weight', 9);
  $config->set('content.field_paragraph_date_range.weight', 1);

  $hidden = $config->get('hidden');
  if (!isset($hidden['field_paragraph_event_price_to'])) {
    $hidden['field_paragraph_event_price_to'] = TRUE;
  }

  if (!isset($hidden['field_paragraph_link'])) {
    $hidden['field_paragraph_link'] = TRUE;
  }

  if (!isset($hidden['field_show_time'])) {
    $hidden['field_show_time'] = TRUE;
  }
  $config->set('hidden', $hidden);

  $config->save();
}

/**
 * Update paragraph event default view with new fields.
 */
function tide_event_update_8029() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_view_display.paragraph.event_details.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.paragraph.event_details.field_date_not_applicable', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_date_not_applicable';
  }
  if (!in_array('field.field.paragraph.event_details.field_event_availability', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_event_availability';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_attendence_mode', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_attendence_mode';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_capacity', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_capacity';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_duration', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_duration';
  }
  if (!in_array('field.field.paragraph.event_details.field_paragraph_event_schedule', $dependencies)) {
    $dependencies[] = 'field.field.paragraph.event_details.field_paragraph_event_schedule';
  }
  $config->set('dependencies.config', $dependencies);

  $module_dependencies = $config->get('dependencies.module');
  if (!in_array('options', $module_dependencies)) {
    $module_dependencies[] = 'options';
  }
  $config->set('dependencies.module', $module_dependencies);

  $content = $config->get('content');
  if (!isset($content['field_date_not_applicable'])) {
    $content['field_date_not_applicable'] = [
      'weight' => 6,
      'label' => 'above',
      'settings' => [
        'format' => 'default',
        'format_custom_false' => '',
        'format_custom_true' => '',
      ],
      'third_party_settings' => [],
      'type' => 'boolean',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_event_availability'])) {
    $content['field_event_availability'] = [
      'weight' => 10,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE
      ],
      'third_party_settings' => [],
      'type' => 'string',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_attendence_mode'])) {
    $content['field_paragraph_attendence_mode'] = [
      'weight' => 9,
      'label' => 'above',
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'list_default',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_capacity'])) {
    $content['field_paragraph_event_capacity'] = [
      'weight' => 11,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE
      ],
      'third_party_settings' => [],
      'type' => 'string',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_duration'])) {
    $content['field_paragraph_event_duration'] = [
      'weight' => 8,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE
      ],
      'third_party_settings' => [],
      'type' => 'string',
      'region' => 'content',
    ];
  }

  if (!isset($content['field_paragraph_event_schedule'])) {
    $content['field_paragraph_event_schedule'] = [
      'weight' => 7,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE
      ],
      'third_party_settings' => [],
      'type' => 'string',
      'region' => 'content',
    ];
  }

  $config->set('content', $content);

  $config->save();
}
